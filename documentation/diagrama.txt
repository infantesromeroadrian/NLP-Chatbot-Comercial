Diagrama Conceptual de la Aplicación de Chatbot
app.py (Script Principal de Streamlit)

Interfaz de usuario con Streamlit.
Inicializa el proceso de descarga y procesamiento de documentos.
Crea el retriever a partir de los documentos procesados.
Inicializa QAChain con el retriever.
Inicializa el Chatbot con QAChain.
data_processing (Directorio)

Contiene scripts para la descarga y procesamiento de documentos.

PDFDownloader.py:

Descarga documentos PDF desde URLs proporcionadas.
PDFLoader.py:

Carga los documentos PDF descargados en memoria.
DocumentSplitter.py:

Divide los documentos cargados en segmentos más manejables.
DocumentEmbedder.py:

Crea embeddings de los segmentos de texto.
Genera el retriever para búsquedas de información.
retrieval (Directorio)

Contiene el script para la cadena de consultas y respuestas.

QAChain.py:

Establece y maneja el proceso de consulta y respuesta.
Utiliza retriever y el modelo de chat de OpenAI.
chatbot (Directorio)

Contiene el script del chatbot.

ChatBot.py:

Maneja la lógica del chatbot.
Utiliza QAChain para responder a las preguntas.
Contiene respuestas predefinidas.
Descripción del Flujo de Datos
Inicio (app.py):

El usuario interactúa con la interfaz de Streamlit.
Se inicia la descarga y procesamiento de documentos.
Procesamiento de Documentos (data_processing):

Los documentos PDF se descargan, cargan, dividen y convierten en embeddings.
Creación del retriever:

A partir de los embeddings, se crea un retriever para la búsqueda de información.
Inicialización de QAChain y Chatbot:

QAChain se inicializa con el retriever.
Chatbot se inicializa con QAChain.
Interacción con el Usuario:

El usuario realiza preguntas a través de la interfaz de Streamlit.
Chatbot procesa estas preguntas y proporciona respuestas.
Respuesta del Chatbot:

El Chatbot usa QAChain y sus respuestas predefinidas para responder a las preguntas del usuario.
Las respuestas se muestran en la interfaz de Streamlit.